generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  hash          String
  accounts      Account[]
  maintainer    Maintainer?
  owner         Owner?
  Renter        Renter?
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Owner {
  id        String      @id @default(cuid())
  userId    String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?
  deleted   Boolean     @default(false)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  aprartemt Apartment[]
}

model Maintainer {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  deleted   Boolean    @default(false)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  apartemnt Apartment?
}

model Apartment {
  id              String      @id @default(cuid())
  ownerId         String
  maintainerId    String?     @unique
  address         String?
  name            String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now()) @updatedAt
  deletedAt       DateTime?
  deleted         Boolean     @default(false)
  apartmentNumber String?
  buildingNumber  String?
  city            String?
  country         String?
  notes           String?
  numberOfTenants Int?
  state           String?
  street          String?
  zip             String?
  postalCode      String?
  maintainer      Maintainer? @relation(fields: [maintainerId], references: [id], onDelete: Cascade)
  owner           Owner       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  Rent            Rent[]
  Renter          Renter[]
}

model Renter {
  id          String    @id @default(cuid())
  userId      String    @unique
  apartmentId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  deletedAt   DateTime?
  deleted     Boolean   @default(false)
  apartment   Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Rent        Rent[]
}

model Rent {
  id          String    @id @default(cuid())
  apartmentId String
  renterId    String
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  deletedAt   DateTime?
  deleted     Boolean   @default(false)
  apartment   Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
  renter      Renter    @relation(fields: [renterId], references: [id], onDelete: Cascade)
}
